{
  "openapi": "3.0.0",
  "info": {
    "title": "Student Management API",
    "version": "1.0.0",
    "description": "API documentation for the Student Management System. Provides endpoints for user authentication, user management, and student data administration."
  },
  "servers": [
    {
      "url": "/api",
      "description": "Main API route"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication related endpoints"
    },
    {
      "name": "Users",
      "description": "User management endpoints"
    },
    {
      "name": "Students",
      "description": "Student-specific data management (Admin access)"
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User Login",
        "description": "Authenticates a user and returns a JWT token upon successful login.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful. JWT token is returned in the response body and set as a cookie.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginSuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User Logout",
        "description": "Logs the user out by clearing the JWT cookie.",
        "responses": {
          "200": {
            "description": "Logged out successfully."
          },
          "401": {
            "description": "Unauthorized if no token is provided."
          }
        }
      }
    },
    "/users/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Register a new user",
        "description": "Creates a new user account. An OTP is sent to the provided email for verification.",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserRegister"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully, OTP sent to email.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/UserResponse"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g., email already in use or invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get my profile",
        "description": "Retrieves the profile information of the currently authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update my profile",
        "description": "Updates the profile information of the currently authenticated user. Password cannot be updated via this route.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User profile updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users/change-role/{id}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Change user role (Admin)",
        "description": "Allows an admin to change the role of any user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeRoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden (not an admin)"
          }
        }
      }
    },
    "/users/forgot": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Forgot Password",
        "description": "Sends a password reset link to the user's email.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset link sent."
          },
          "404": {
            "description": "Email not registered."
          }
        }
      }
    },
    "/users/verifyotp": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Verify OTP",
        "description": "Verifies the OTP sent to the user's email to activate the account.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyOTPRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User account verified successfully."
          },
          "401": {
            "description": "Invalid or expired OTP."
          }
        }
      }
    },
    "/users/all": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users (Admin)",
        "description": "Retrieves a list of all users. Requires admin privileges.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/users/delete/{id}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user (Admin)",
        "description": "Deletes a user by their ID. Requires admin privileges.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },
    "/users/password": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update password",
        "description": "Allows an authenticated user to update their own password.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Incorrect current password."
          }
        }
      }
    },
    "/users/resetpassword/{token}": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset password with token",
        "description": "Resets the user's password using the token sent to their email.",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The password reset token"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully."
          },
          "400": {
            "description": "Invalid or expired token, or passwords do not match."
          }
        }
      }
    },
    "/students": {
      "get": {
        "tags": [
          "Students"
        ],
        "summary": "Get all students (Admin)",
        "description": "Retrieves a list of all users with the 'student' role. Requires admin privileges.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of students.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Students"
        ],
        "summary": "Create a new student (Admin)",
        "description": "Creates a new user with the 'student' role. Requires admin privileges.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StudentCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Student created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/students/{id}": {
      "get": {
        "tags": [
          "Students"
        ],
        "summary": "Get student by ID (Admin)",
        "description": "Retrieves a specific student's details by their ID. Requires admin privileges.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Student ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Student not found."
          }
        }
      },
      "put": {
        "tags": [
          "Students"
        ],
        "summary": "Update a student (Admin)",
        "description": "Updates a student's details. Requires admin privileges.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Student ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Student updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Student not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Students"
        ],
        "summary": "Delete a student (Admin)",
        "description": "Deletes a student's record. Requires admin privileges.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Student ID to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Student deleted successfully."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Student not found."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserBase": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "phoneNumber": {
            "type": "string",
            "example": "123-456-7890"
          },
          "gender": {
            "type": "string",
            "enum": [
              "Male",
              "Female",
              "Other"
            ]
          },
          "username": {
            "type": "string",
            "example": "johndoe"
          },
          "address": {
            "type": "string",
            "example": "123 Main St, Anytown, USA"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date",
            "example": "1999-12-31"
          }
        }
      },
      "StudentFields": {
        "type": "object",
        "properties": {
          "course": {
            "type": "string",
            "example": "Computer Science"
          },
          "enrollmentYear": {
            "type": "number",
            "example": 2021
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Graduated",
              "Dropped"
            ],
            "default": "Active"
          }
        }
      },
      "UserRegister": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserBase"
          },
          {
            "type": "object",
            "required": [
              "email",
              "password"
            ],
            "properties": {
              "password": {
                "type": "string",
                "format": "password",
                "minLength": 8
              },
              "image": {
                "type": "string",
                "format": "binary",
                "description": "User's profile picture."
              }
            }
          }
        ]
      },
      "StudentCreate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserBase"
          },
          {
            "$ref": "#/components/schemas/StudentFields"
          },
          {
            "type": "object",
            "required": [
              "email",
              "password"
            ],
            "properties": {
              "password": {
                "type": "string",
                "format": "password",
                "minLength": 8
              }
            }
          }
        ]
      },
      "UserUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserBase"
          },
          {
            "$ref": "#/components/schemas/StudentFields"
          }
        ]
      },
      "UserResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserBase"
          },
          {
            "$ref": "#/components/schemas/StudentFields"
          },
          {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "example": "60d0fe4f5311236168a109ca"
              },
              "image": {
                "type": "string",
                "format": "uri"
              }
                         },
              "role": {
                "type": "string",
                "enum": [
                  "admin",
                  "student"
                ]
              },
              "verified": {
                "type": "boolean",
                "description": "Indicates if the user has verified their email."
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          
        ]
      },
      "LoginRequest": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "admin@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "password123"
          }
        }
      },
      "LoginSuccessResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          },
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        }
      },
      "ChangeRoleRequest": {
        "type": "object",
        "required": [
          "role"
        ],
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "admin",
              "student"
            ],
            "example": "admin"
          }
        }
      },
      "ForgotPasswordRequest": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          }
        }
      },
      "VerifyOTPRequest": {
        "type": "object",
        "required": [
          "otp"
        ],
        "properties": {
          "otp": {
            "type": "string",
            "example": "1234567"
          }
        }
      },
      "UpdatePasswordRequest": {
        "type": "object",
        "required": [
          "currentPassword",
          "newPassword"
        ],
        "properties": {
          "currentPassword": {
            "type": "string",
            "format": "password",
            "example": "currentSecurePassword"
          },
          "newPassword": {
            "type": "string",
            "format": "password",
            "example": "newMoreSecurePassword"
          }
        }
      },
      "ResetPasswordRequest": {
        "type": "object",
        "required": [
          "newPassword",
          "confirm"
        ],
        "properties": {
          "newPassword": {
            "type": "string",
            "format": "password",
            "example": "newPassword123"
          },
          "confirm": {
            "type": "string",
            "format": "password",
            "example": "newPassword123"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Resource not found"
          },
          "error": {
            "type": "string",
            "example": "Bad Request"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Authorization header using the Bearer scheme. Example: 'Authorization: Bearer {token}'"
      }
    }
  }
}